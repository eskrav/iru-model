var beta_high_a = 2.196026
var beta_high_b = 0.410857
var beta_low_a = 0.902843
var beta_low_b = 1.367937

// Activity type
var activityType = ["habitual","non-habitual"]

// Activity type prior
var activityTypePrior = function() {
  categorical([0.5, 0.5], activityType)
}

// Habituality priors
var habitualityPrior = function(activityType) {
  activityType === "habitual" ? sample(Beta({a: beta_high_a, b: beta_high_b})) :
  activityType === "non-habitual" ? sample(Beta({a: beta_low_a, b: beta_low_b})) :
  true
}

// Theta prior
var thetaPrior = function(activity) {
  var thetas = [0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95]
  return uniformDraw(thetas)
}

// Current activity state
var state = ["happened","didn't happen"]

// State priors
var statePrior = function(habituality) {
  flip(habituality) ? state[0] : state[1]
}

// Utterances
var utterance = ['oh yeah','exclamation','plain','(...)']

// Utterance cost
var cost = {
  "oh yeah": 5,
  "exclamation": 4,
  "plain": 3,
  "(...)": 0
}

// Meaning
var meaning = function(utterance,state,theta,habituality) {
  utterance === "oh yeah" ? state === "happened" && habituality <= theta : 
  utterance === "exclamation" ? state === "happened" && habituality <= theta : 
  utterance === "plain" ? state === "happened" && habituality <= theta : 
  utterance === "(...)" ? true :
  true
}

// Speaker optimality
var alpha = 1

// Utterance prior
var utterancePrior = mem(function() {
  var uttProbs = map(function(u) {return Math.exp(-cost[u])}, utterance)
  return categorical(uttProbs, utterance)
})

// Literal listener
var literalListener = mem(function(utterance, habituality, theta) {
  return Infer({model: function() {
    var state = statePrior(habituality)
    condition(meaning(utterance, state, theta, habituality))
    return state
  }})
})

// Speaker
var speaker = mem(function(state, habituality, theta) {
  return Infer({model: function() {
    var utterance = utterancePrior()
    factor(alpha * literalListener(utterance, habituality, theta).score(state))
    return utterance
  }})
})

// Pragmatic listener
var pragmaticListener = mem(function(utterance, info, activityType) {
  return Infer({method: "MCMC", samples: 50000, model: function() {
    var habituality = habitualityPrior(activityType)
    var theta = thetaPrior()
    var state = statePrior(habituality)
    observe(speaker(state, habituality, theta), utterance)
    info === "both" ? {state: state, theta: theta, habituality: habituality} :
    info === "state" ? state :
    info === "theta" ? theta :
    info === "habituality" ? habituality :
    true
  }})
})
